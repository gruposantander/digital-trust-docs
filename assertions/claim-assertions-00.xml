<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="none" docName="claim-assertions-00" submissionType="IETF" category="std" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" consensus="true">

<front>
<title abbrev="claim-assertions">Claim Assertions</title><seriesInfo value="claim-assertions-00" status="standard" name="Internet-Draft"></seriesInfo>
<author initials="A." surname="Pulido" fullname="Alberto Pulido Moyano"><organization>Santander</organization><address><postal><street></street>
</postal><email>alberto.pulido@santander.co.uk</email>
</address></author>
<author initials="V." surname="Herraiz, Ed." fullname="Victor Herraiz Posada"><organization>Santander</organization><address><postal><street></street>
</postal><email>victor.herraiz@santander.co.uk</email>
</address></author>
<author initials="J." surname="Oliva" fullname="Jorge Oliva Fernandez"><organization>Santander</organization><address><postal><street></street>
</postal><email>Jorge.OlivaFernandez@santander.co.uk</email>
</address></author>
<date year="2020" month="April" day="2"></date>
<area>Identity</area>
<workgroup>connect</workgroup>
<keyword>security</keyword>
<keyword>openid</keyword>
<keyword>authorization</keyword>
<keyword>trust</keyword>

<abstract>
<t>This specification defines a new claim that allows assertions over existing claims.</t>
</abstract>

</front>

<middle>

<section anchor="Introduction"><name>Introduction</name>
<t>In order to avoid an unnecessary leak of information, the answer to some claims may be only a boolean, verifying the claim instead of returning the actual value. As an example, assert that one is older than 18 without revealing the actual age.</t>
<t>Section 5.5.1 of the OpenID Connect specification <xref target="OIDC"></xref> defines a query syntax that allows for the member <tt>value</tt> of the requested claim to be a JSON object with additional information/constraints. For doing so it defines three members (essential, value and values) with special query meanings and allows for other special members to be defined. Any members that are not understood, must be ignored. This mechanism does not cover the above requirements and in this specification we will try to complement the <xref target="OIDC"></xref> specification with a richer syntax.</t>

<section anchor="notational-conventions"><name>Notational Conventions</name>
<t>The key words &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;MAY&quot;, and &quot;CAN&quot; in this document are to be interpreted as described in &quot;Key words for use in RFCs to Indicate Requirement Levels&quot; <xref target="RFC2119"></xref>. These key words are not used as dictionary terms such that any occurrence of them shall be interpreted as key words and are not to be interpreted with their natural language meanings.</t>
</section>

<section anchor="terminology"><name>Terminology</name>
<t>This specification uses the terms &quot;Claim&quot;, &quot;Claim Type&quot;, &quot;Claims Provider&quot;,&quot;ID Token&quot;, &quot;OpenID Provider (OP)&quot;, &quot;Relying Party (RP)&quot;, and &quot;UserInfo Endpoint&quot; defined by OpenID Connect <xref target="OIDC"></xref></t>
</section>
</section>

<section anchor="request"><name>Request</name>
<t>This specification defines a generic mechanism to request assertions over claims using the new element <tt>assertion_claims</tt>. This new element will be used inside the parameter <tt>claims</tt>, as specified in section 5.5 of <xref target="OIDC"></xref> as a normal claim at <tt>id_token</tt> or <tt>userinfo</tt> level. It will contain the assertions of any claims relating to the End-User.</t>
<t>The top level elements of the <tt>assertion_claims</tt> JSON object are the actual claim names with <tt>assertion</tt> member nested inside:</t>

<sourcecode type="json">{
&quot;id_token&quot;: {
    &quot;assertion_claims&quot;: {
      &quot;given_name&quot;: {
        &quot;assertion&quot;: { &quot;eq&quot;: &quot;William&quot; }
      }
    }
  }
}
</sourcecode>
<t>The following members are defined for every claim:</t>

<ul>
<li><t><tt>assertion</tt> REQUIRED, Object: Expression that will be evaluated against the actual value of the claim.</t>
</li>
<li><t><tt>purpose</tt> OPTIONAL, String: String describing the purpose of the request to the End-User.</t>
</li>
<li><t><tt>essential</tt> OPTIONAL, Boolean: As defined at section 5.5.1 <xref target="OIDC"></xref></t>
</li>
</ul>
<t>Every other member that is not recognized by the OP SHOULD be ignored.</t>
</section>

<section anchor="expression-language"><name>Expression Language</name>
<t>The <tt>assertion</tt> member contains the expression (a JSON object) that will be evaluated as a <tt>boolean</tt> depending on the actual value of the named claim.</t>
<t>This language SHOULD be defined by the OP and it MUST be discoverable at the well-known endpoint, see section <eref target="#op-metadata">OP Metadata</eref>.</t>
<t>Recommended operations (if applicable):</t>

<ul>
<li><t>eq: The value is equal to the given value.</t>
</li>
<li><t>gt: The value should be greater than the given value.</t>
</li>
<li><t>lt: The value should be lower than the given value.</t>
</li>
<li><t>gte: The value is equal or greater than the given value.</t>
</li>
<li><t>lte: The value is equal or lower than the given value.</t>
</li>
<li><t>in: The value is equal to one of the elements in the given list.</t>
</li>
<li><t>or: The value pass any of the given expressions.</t>
</li>
<li><t>some: The value is equal to any of the values within an array.</t>
</li>
<li><t>none: The value is not equal to any of the values within an array.</t>
</li>
<li><t>every: The value is equal to all of the values within an array.</t>
</li>
</ul>
<t>The OP is entitled to change the specification to match any individual requirements.</t>

<section anchor="simple-types"><name>Simple Types</name>
<t>Every claim value has a type (i.e. String, Number) and depending on this type of the claim some operators will not be valid.</t>
<t>In some cases the value requires some manipulation before executing the expression (e.g. phone numbers require normalization).</t>
<t>In the following example, <tt>given_name</tt> type is <tt>string</tt> and the result of the expression evaluation becomes <tt>true</tt> only if the value of the claim is <tt>William</tt>.</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;given_name&quot;: {
      &quot;assertion&quot;: { &quot;eq&quot;: &quot;William&quot; }
    }
  }
}
</sourcecode>
<t>In the following case the type does not match and its behavior is undefined. The OP could then return an error in this case:</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;given_name&quot;: {
      &quot;assertion&quot;: { &quot;eq&quot;: 1701 }
    }
  }
}
</sourcecode>
<t>In some cases the evaluation requires conversions. For instance, <tt>simple_balance</tt> contains a decimal number as a <tt>string</tt> and requires a conversion before evaluation. The following expression becomes <tt>true</tt> only if the value of the claim is greater than <tt>1234.00</tt>.</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;simple_balance&quot;: {
      &quot;assertion&quot;: { &quot;gt&quot;: &quot;1234.00&quot; }
    }
  }
}
</sourcecode>
<t>If there are multiple operators (e.g. <tt>gt</tt> or <tt>lte</tt>), the expression will be evaluated as <tt>true</tt> if all operators return <tt>true</tt>. In other words, it behaves as a logical <tt>and</tt>. The following example will be <tt>true</tt> only if the claim value is greater than <tt>1234.00</tt> and less than or equal to <tt>20000.00</tt>:</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;simple_balance&quot;: {
      &quot;assertion&quot;: {
        &quot;gt&quot;: &quot;1234.00&quot;,
        &quot;lte&quot;: &quot;20000.00&quot;
      }
    }
  }
}
</sourcecode>
<t>An empty assertion always returns <tt>true</tt>.</t>
</section>

<section anchor="complex-types"><name>Complex Types</name>
<t>Some claim values are objects and to provide assertions over properties of those values, a new operator is required. This will prevent any collision between operators and property names. We will use <tt>props</tt> for that purpose.</t>
<t><tt>balance</tt> claim value example:</t>

<sourcecode type="json">{
  &quot;balance&quot;: {
    &quot;amount&quot;: &quot;1200.00&quot;,
    &quot;currency&quot;: &quot;GBP&quot;
  }
}
</sourcecode>
<t><tt>props</tt> is used in the following example:</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;balance&quot;: {
      &quot;assertion&quot;: {
        &quot;props&quot;: {
          &quot;amount&quot;: { &quot;gt&quot;: &quot;1000.00&quot; },
          &quot;currency&quot;: { &quot;eq&quot;: &quot;GBP&quot; }
        }
      }
    }
  }
}
</sourcecode>
<t>This expression will become <tt>true</tt> only if <tt>amount</tt> and <tt>currency</tt> expressions are <tt>true</tt>.</t>
<t>Any property that is not included in the expression will not affect the evaluation. For example, if <tt>currency</tt> is not included in the assertion, it will not affect the outcome.</t>
<t>Any assertion over a missing property returns <tt>false</tt>.</t>
</section>

<section anchor="array-types"><name>Array Types</name>
<t>Some complex type claims could include properties as an array. If that's the case, the proposed set of operands also includes specific ones for creating assertions using those properties.</t>
<t>Here is an example assertion request for a complex <tt>bank_account</tt> type claim which includes a property called <tt>identifiers</tt> , containing an array with several identifications for different schemas. The request could allow validating ownership on an account passing the identifier in Sort Code Account Number schema:</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;bank_account&quot;:{
      &quot;assertion&quot;: {
        &quot;props&quot;: {
          &quot;identifiers&quot;: {
            &quot;some&quot;: {
              &quot;props&quot;: {
                &quot;identification&quot;: { &quot;eq&quot;: &quot;09012700047186&quot;},
                &quot;type&quot;: {&quot;eq&quot;: &quot;UK.SortCodeAccountNumber&quot; }
              }
            }
          }
        }
      }
    }
  }

</sourcecode>
</section>

<section anchor="multiple-assertions-example"><name>Multiple Assertions Example</name>
<t>The following is a non normative example of a request containing multiple assertions:</t>

<sourcecode type="json">{
  &quot;id_token&quot;: {
    &quot;assertion_claims&quot;: {
      &quot;given_name&quot;: {
        &quot;assertion&quot;: { &quot;eq&quot;: &quot;Leonard&quot; }
      },
      &quot;balance&quot;: {
        &quot;assertion&quot;: {
          &quot;props&quot;: {
            &quot;amount&quot;: { &quot;gt&quot;: &quot;1000.00&quot; },
            &quot;currency&quot;: { &quot;eq&quot;: &quot;USD&quot; }
          }
        }
      },
      &quot;email&quot;: {
        &quot;assertion&quot;: { &quot;eq&quot;: &quot;nimoy@enterpise.fp&quot; }
      }
    }
  }
}
</sourcecode>
<t>Each assertion will be evaluated independently and the user should be able to consent and share each individual result back to the RP.</t>
</section>
</section>

<section anchor="response"><name>Response</name>
<t>The request will return the result of the assertion execution and any potential errors.</t>
<t>Implementers MUST return an object for each claim inside <tt>assertion_claims</tt> element with the following fields:</t>

<ul>
<li><t><tt>result</tt> REQUIRED. Boolean: it indicates if the claim value meets the assertion. If the claim is not found, does not match, the OP does not understand the expression or any other problem resolving the value, then this element should be equal to <tt>null</tt>.</t>
</li>
<li><t><tt>error</tt> OPTIONAL, Any: Available information about the error resolving the assertion.</t>
</li>
</ul>
<t>The following is a non normative example of the response:</t>

<sourcecode type="json">{
  &quot;assertion_claims&quot;: {
    &quot;name&quot;: { &quot;result&quot;: true },

    &quot;balance&quot;: {
      &quot;result&quot;: null,
      &quot;error&quot;: &quot;unknown_operator&quot;
    },
    &quot;address&quot;: { &quot;result&quot;: true },
    &quot;email&quot;: { &quot;result&quot;: false }
  }
}
</sourcecode>
</section>

<section anchor="op-metadata"><name>OP Metadata</name>
<t>The OP SHOULD advertise their capabilities with respect to assertion claims in their <tt>openid-configuration</tt> (see <xref target="OIDC.Discovery"></xref>) using the following new elements:</t>

<ul>
<li><t><tt>assertion_claims_supported</tt>: Boolean value indicating support of assertion claims.</t>
</li>
<li><t><tt>claims_in_assertion_claims_supported</tt>: List of claims that can be included in the <tt>assertion_claims</tt> element.</t>
</li>
<li><t><tt>assertion_claims_query_language_supported</tt>: List of members supported in the claims included in the <tt>assertion_claims</tt> element.</t>
</li>
</ul>
<t>Non normative example:</t>

<sourcecode type="json">{
  &quot;assertion_claims_query_language_supported&quot;: {
    &quot;date&quot;: [
      &quot;eq&quot;,
      &quot;gt&quot;,
      &quot;lt&quot;,
      &quot;gte&quot;,
      &quot;lte&quot;,
      &quot;in&quot;
    ],
    &quot;decimal&quot;: [
      &quot;eq&quot;,
      &quot;gt&quot;,
      &quot;lt&quot;,
      &quot;gte&quot;,
      &quot;lte&quot;
    ],
    &quot;number&quot;: [
      &quot;eq&quot;,
      &quot;gt&quot;,
      &quot;lt&quot;,
      &quot;gte&quot;,
      &quot;lte&quot;
    ],
    &quot;object&quot;: [],
    &quot;phone_number&quot;: [
      &quot;eq&quot;,
      &quot;in&quot;
    ],
    &quot;string&quot;: [
      &quot;eq&quot;,
      &quot;in&quot;
    ],
    &quot;boolean&quot;: [
      &quot;eq&quot;
    ],
    &quot;array&quot;: [
      &quot;none&quot;,
      &quot;every&quot;,
      &quot;some&quot;
    ]
  },
  &quot;assertion_claims_supported&quot;: true,
  &quot;claims_in_assertion_claims_supported&quot;: {
    &quot;total_balance&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;props&quot;: {
        &quot;amount&quot;: {
          &quot;type&quot;: &quot;decimal&quot;
        },
        &quot;currency&quot;: {
          &quot;type&quot;: &quot;string&quot;
        }
      }
    },
    &quot;phone_number&quot;: {
      &quot;type&quot;: &quot;phone_number&quot;
    },
    &quot;email&quot;: {
      &quot;type&quot;: &quot;string&quot;
    },
    &quot;birthdate&quot;: {
      &quot;type&quot;: &quot;date&quot;
    },
    &quot;family_name&quot;: {
      &quot;type&quot;: &quot;string&quot;
    },
    &quot;given_name&quot;: {
      &quot;type&quot;: &quot;string&quot;
    },
    &quot;bank_account&quot;: {
      &quot;type&quot;: &quot;object&quot;,
      &quot;props&quot;: {
        &quot;id&quot;: {
          &quot;type&quot;: &quot;string&quot;
        },
        &quot;currency&quot;: {
          &quot;type&quot;: &quot;string&quot;
        },
        &quot;type&quot;: {
          &quot;type&quot;: &quot;string&quot;
        },
        &quot;identifiers&quot;: {
          &quot;type&quot;: &quot;array&quot;,
          &quot;items&quot;: {
            &quot;type&quot;: &quot;object&quot;,
            &quot;props&quot;: {
              &quot;type&quot;: {
                &quot;type&quot;: &quot;string&quot;
              },
              &quot;identification&quot;: {
                &quot;type&quot;: &quot;string&quot;
              }
            }
          }
        }
      }
  }
  }
}

</sourcecode>
</section>

<section anchor="privacy-considerations"><name>Privacy Considerations</name>
<t>The <tt>assertion_claims</tt> can contain Personally Identifiable Information (PII). As such, OP SHOULD obtain End-User consent for the release of the information at or prior to the request in accordance with relevant regulations.</t>
<t>How to get such consent is out of scope for this specification.</t>
<t>The RP SHOULD not keep the information within <tt>assertion_claims</tt> unless necessary and SHOULD delete such information as soon as it is no longer necessary in accordance with relevant regulations.</t>
</section>

<section anchor="iana-considerations"><name>IANA Considerations</name>
<t>To be done.</t>
</section>

</middle>

<back>
<references><name>Normative References</name>
<reference anchor="OIDC" target="http://openid.net/specs/openid-connect-core-1_0.html">
  <front>
    <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <author fullname="Mike Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization>Google</organization>
    </author>
    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization>Salesforce</organization>
    </author>
    <date year="2014" month="Nov" day="8"></date>
  </front>
</reference>
<reference anchor="RFC2119" target="https://tools.ietf.org/html/rfc2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="Scott Bradner" initials="S." surname="Bradner">
      <organization>Harvard University</organization>
    </author>
    <date year="1997" month="March"></date>
  </front>
</reference>
<reference anchor="OIDC.Discovery" target="https://openid.net/specs/openid-connect-discovery-1_0.html">
  <front>
    <title>OpenID Connect Discovery 1.0 incorporating errata set 1</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <author fullname="Mike Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="Edmund Jay" initials="E." surname="Jay">
      <organization>Illumila</organization>
    </author>
    <date year="2014" month="Nov" day="8"></date>
  </front>
</reference>
</references>

<section anchor="Acknowledgements"><name>Acknowledgements</name>
<t>We would like to thank Kai Lehmann and Kosuke Koiwai for their valuable feedback and contributions that helped to evolve this specification.</t>
</section>

<section anchor="notices"><name>Notices</name>
<t>MIT License</t>
<t>Copyright (c) 2020 Grupo Santander</t>
<t>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</t>
<t>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</t>
<t>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</t>
</section>

</back>

</rfc>
