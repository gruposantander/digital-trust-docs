<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="none" docName="dtp-auth-code-00" submissionType="IETF" category="std" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" consensus="true">

<front>
<title abbrev="dtp-auth-code">Digital Trust Protocol Authorization Code Flow</title><seriesInfo value="dtp-auth-code-00" status="standard" name="Internet-Draft"></seriesInfo>
<author initials="A." surname="Pulido" fullname="Alberto Pulido Moyano"><organization>Santander</organization><address><postal><street></street>
</postal><email>alberto.pulido@santander.co.uk</email>
</address></author>
<author initials="V." surname="Herraiz" fullname="Victor Herraiz Posada"><organization>Santander</organization><address><postal><street></street>
</postal><email>victor.herraiz@santander.co.uk</email>
</address></author>
<author initials="J." surname="Oliva, Ed." fullname="Jorge Oliva Fernandez"><organization>Santander</organization><address><postal><street></street>
</postal><email>Jorge.OlivaFernandez@santander.co.uk</email>
</address></author>
<author initials="D." surname="Bianchini" fullname="Davide Bianchini"><organization>Santander Technology</organization><address><postal><street></street>
</postal><email>davide.bianchini@santander.co.uk</email>
</address></author>
<date year="2020" month="March" day="19"></date>
<area>Identity</area>
<workgroup>connect</workgroup>
<keyword>security</keyword>
<keyword>openid</keyword>
<keyword>authorization</keyword>
<keyword>trust</keyword>

<abstract>
<t>This document defines the Digital Trust Protocol authorization code flow, which allows End-Users to share verified information with Clients in a secure way using OIDC and OAuth 2.0 protocols.</t>
</abstract>

</front>

<middle>

<section anchor="Introduction"><name>Introduction</name>
<t>Privacy is one of the most important things in our lives and thanks to the growth of online services, we have began to lose direct control of our own data. Many services rely on data from untrusted sources, leading to the creation and usage of fake identities online.</t>
<t>Most of the services require private information that is introduced by the user, making users spread the same details around the different service providers while not allowing these service providers to verify the information filled by customers. We believe that this is inefficient for both parties.</t>
<t>We want to define a way that will help customers to share the minimum required level of details whilst allowing services to get rich and trusted information. Taking advantage of the assertion claims proccess will give third parties the option of not having to handle sensitive data storage.</t>
<t>OIDC provides a mechanism to verify the identity of the End-User based on authentication performed by an Auth Server and retrieval of Basic profile information. We would like to use this mechanism in order to provide certified information via a secure communication protocol, therefore, we chose OpenId as base.</t>
<t>Further extensions will complement the full protocol specifications.</t>

<section anchor="notational-conventions"><name>Notational conventions</name>
<t>The key words &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;MAY&quot;, and &quot;CAN&quot; in this document are to be interpreted as described in &quot;Key words for use in RFCs to Indicate Requirement Levels&quot; <xref target="RFC2119"></xref>. These key words are not used as dictionary terms such that any occurrence of them shall be interpreted as key words and are not to be interpreted with their natural language meanings</t>
</section>

<section anchor="terminology"><name>Terminology</name>
<t>This specification uses the terms &quot;Access Token&quot;, &quot;Authorization Code&quot;, &quot;Authorization Endpoint&quot;, &quot;Authorization Grant&quot;, &quot;Authorization Server&quot;, &quot;Client&quot;, &quot;Client Authentication&quot;, &quot;Client Identifier&quot;, &quot;Client Secret&quot;, &quot;Grant Type&quot;, &quot;Protected Resource&quot;, &quot;Redirection URI&quot;, &quot;Refresh Token&quot;,  &quot;Response Type&quot;, and &quot;Token Endpoint&quot; defined by <xref target="OAuth2.0"></xref>, the terms &quot;Claim Name&quot;, &quot;Claim Value&quot; and &quot;JSON Web Token (JWT)&quot; defined by <xref target="JWT"></xref>, the terms &quot;Header Parameter&quot;, &quot;JOSE Header&quot; and &quot;JSON Web Signature (JWS)&quot; defined by <xref target="JWS"></xref>, the term &quot;User Agent&quot; defined by <xref target="RFC2616"></xref>, and the term &quot;Response Mode&quot; defined by <xref target="OAuth.Multiple.Responses"></xref>, and terms &quot;Authentication&quot;, &quot;Authentication Request&quot;, &quot;Authorization Request&quot;, &quot;Claim&quot;, &quot;Claim Type&quot;, &quot;Claims Provider&quot;, &quot;Credential&quot;, &quot;End-User&quot;, &quot;Entity&quot;, &quot;ID Token&quot;, &quot;Identifier&quot;, &quot;Identity&quot;, &quot;Issuer&quot;, &quot;OpenID Provider (OP)&quot;, &quot;Request Object&quot;, &quot;Request URI&quot;, &quot;Relying Party (RP)&quot;, &quot;UserInfo Endpoint&quot;, &quot;Validation&quot;, &quot;Verification&quot; defined by OpenID Connect <xref target="OIDC"></xref></t>
<t>This specification also use to the following terms:</t>

<dl>
<dt>OpenID</dt>
<dd><t>References to &quot;openid&quot; in this documentation are about OpenID connect specification <xref target="OIDC"></xref></t>
</dd>
</dl>
</section>
</section>

<section anchor="dtp-authorization-code-flow"><name>DTP Authorization Code flow</name>
<t>This section describes how to perform a customer information share using the Authorization Code Flow, this flow is based on the &quot;Authentication using the Authorization Code Flow&quot; Section 3.1 of <xref target="OIDC"></xref> specification. We have made some add ons and changes to fulfil our requirements, with focus on customer privacy control and security best practices.</t>

<section anchor="authorization-code-flow-steps"><name>Authorization Code Flow Steps</name>
<t>These steps of the flow are illustrated in the following diagram:</t>
<figure><artwork src="DiagramRFC.svg" type="svg" name="Diagram"/></figure>
<t><eref target="http://www.plantuml.com/plantuml/uml/XLFHRjiw37ttL_0n1b8aj_Tbo9QXGHPi7OhPQBBrCL0bDXPgIvb4T-s-nj_YBnlbHe6zP9kV3F6SG_AGlF8a7DLLcNWfIeHAFCERwHH-Q4L58YHP1ylQawtG9SdAaAONkCsFlrcUy3UVynlSuRtNX9F5VW_pUPBmqyNx8tisY0l_gCqE7bXU2H994c5COQqPoC9QZv0x-wGLkfZZ5h_Nw2dglsDqnkYL9t5VQbz0LLCjIjZSh6C176-RjicpzGOcscZIWl12r5HOftyYZ6IfqH18XmeDHqi_1dV8y_bkdIP9bhVD8TCtKMh50h1W0LXsrBE0A74-k9PsZnxi0r1nXC98UAY4OOHrBoai2vIFeMifJCG4l4TGI4ANVY2-TDZBkwsTXj7Nsoyfi29ubiJGJg2mBMqJNFwqsUHmEVslJngt3JxljKE_rQRp_JYRXPIu9n-dS7RA_qyluSPAGTgQ6KoEFh-DHb-hSJzTEfnzblT9V-PaUKHdzoIqwKyCQi_BrIT4_606hzAQfNsOHiYWj4CPNUWfjaslojUbWrct0a511hNHZTrfavxWPWVNG5hZ6GqJM6F9MK0RNl-gCmh8WY-4mmaib88FWiHnzVkrTrECIXpuc_V3TfWg2CVCLGYZQ727l0XlwUa9VbnjO03S1k11AGm-0jlcANhQnUAnRkmZ6hWsX4uMmkpmjxDjct_SBRmUBGMTitTwjhvXtpid3BtiSNOA7Lxsqvd3ZHrgjJqK4TRBEjw9LJfc7wL4xoSE7npw8askqAYwAdy1">Diagram Source Here</eref></t>
<t>The Authorization Code Flow follows the steps outlined below: (separated in groups as in the flow diagram)</t>

<section anchor="rp-website-app-flow-steps"><name>RP website/APP Flow Steps</name>
<t>The start of the process can be initiated and presented to the customer in different ways, but common steps are:</t>

<ol>
<li><t>Customer is going through a journey in an RP website or app.</t>
</li>
<li><t>RP website/app asks for a certified data to the customer and offers the different providers that are integrated in the RP implementation.</t>
</li>
<li><t>Customer selects a provider to retrieve the requested information.</t>
</li>
</ol>
</section>

<section anchor="rp-request-flow-steps"><name>RP Request Flow Steps</name>
<t>Once the RP gets the provider selected by the customer the steps to initiate the information interchange are:</t>

<ol>
<li><t>It is RECOMMENDED that RP and OP establish a mutual TLS connection. If a mutual TLS connection is not possible, then communication with the Authorization Server MUST utilize TLS. See Section 16.17 of <xref target="OIDC"></xref> for more information on using TLS.</t>
</li>
<li><t>RP sends the request to the Initiate Authorization endpoint in the OP to initiate the process and the authorization data is sent inside a request object as described in section <eref target="#initi-auth-req">Initiate Authorization Request</eref> of this specification.</t>
</li>
<li><t>OP MUST validate that the client is correctly authenticated and MUST validate the request object as described in Section 3.1.2.2. of <xref target="OIDC"></xref>. Additionally the OP MUST validate the <tt>request</tt> JWS following Section 6.3. of <xref target="OIDC"></xref> specification.</t>
</li>
<li><t>If validations are correct, the OP MUST store the JWS and generate a <tt>request_uri</tt> that identifies where it is located. This is as described in the <xref target="OAuth.PAR"></xref> specification.</t>
</li>
<li><t>OP will return to the RP a response with the format described in section <eref target="#succ-init-auth-resp">Successful Initiate Authorization Response</eref> of this specification.</t>
</li>
<li><t>In case of any error, the OP will return an error response as described in section <eref target="#err-init-auth-resp">Initiate Authorization Error Response</eref> of this specification.</t>
</li>
</ol>
</section>

<section anchor="customer-accepts-request-flow-steps"><name>Customer Accepts Request Flow Steps</name>
<t>Once the OP has validated the request JWS from the RP, the user authentication and consent flow continues as follows:</t>

<ol>
<li><t>RP responds to the user with a HTTP 302 redirect response as described in Section 3.1.2.1 of <xref target="OIDC"></xref>. Contained in the Location header, is the url with the needed params to make an authentication Request to the OP. An example of this response can be found in <eref target="#auth-redirect-resp">Authorize redirect response</eref></t>
</li>
<li><t>The customer User Agent follows the redirection and makes a new Authentication Request to the Authorization Endpoint in the OP. Example of the request: <eref target="#auth-req">Authentication request</eref>.</t>
</li>
<li><t>OP MUST obtain the request JWS from storage using the <tt>request_uri</tt> parameter. OP MUST check that <tt>request_uri</tt> is still valid and has not expired.</t>
</li>
<li><t>OP MUST then validate the request as described in Section 3.1.2.2. of <xref target="OIDC"></xref>. OP MUST be aware that even if the <tt>request_uri</tt> parameter is used, parameters MAY also be passed using the OAuth 2.0 request syntax. This occurs when the parameter values contained in the referenced JWT supersede those passed using the OAuth 2.0 request syntax, as described in Section 6.2. of <xref target="OIDC"></xref>.</t>
</li>
<li><t>If the request is valid, the OP attempts to Authenticate the End-User or determine whether the End-User is Authenticated. The way to authenticate the user (user, password, 2FA, cookies... ) is out of the scope of this specification. The normal approach is to present the user one or more pages (steps auth) to allow them to authenticate. More details in Section 3.1.2.3. of <xref target="OIDC"></xref>.</t>
</li>
<li><t>Once the customer is authenticated, the Authorization Server MUST obtain an authorization decision before releasing information to the RP, as described in Section 3.1.2.4. of <xref target="OIDC"></xref>. The OP will present an interactive dialog to the customer explaining what are the claims requested by the RP. The RP MAY show the data that is going to be shared in order to help the End-user to take a decision and in this case, please follow the security recommendations described in section <eref target="#security-considerations">Security Considetarions</eref>. The customer then accepts or selects information to share with the RP.</t>
</li>
<li><t>Once customer gives their consent to the request, the OP will store the information (which of the claims have been consented) and generate an authorization code.</t>
</li>
<li><t>OP responds to the user with a HTTP 302 redirect response, with Location header pointing to the <tt>redirect_uri</tt> and the generated <tt>code</tt> passed as a query parameter, as described in Section 3.1.2.5. of <xref target="OIDC"></xref>. Example of the response: <eref target="#succ-auth-resp">Successful Authorize response</eref>.</t>
</li>
<li><t>In case of any error, the OP will return an error response as described in section <eref target="#err-resp">Error Response</eref>, and will use the error codes from Section 3.1.2.6 of <xref target="OIDC"></xref>.</t>
</li>
<li><t>The customer User Agent follows the redirection and makes a request to the RP callback uri, providing the authorization code in the query string. An example of the request is: <eref target="#callback-req">Callback RP request</eref>.</t>
</li>
<li><t>RP MUST validate the authorization response following Section 3.1.2.7. of <xref target="OIDC"></xref> specification.</t>
</li>
</ol>
</section>

<section anchor="rp-token-interchange-flow-steps"><name>RP Token Interchange Flow Steps</name>
<t>If the RP obtains the consent from the customer in the form of an authorization <tt>code</tt>, then the token interchange process continues with these steps:</t>

<ol>
<li><t>It is RECOMMENDED that the RP and OP establish a mutual TLS connection. Where this is not possible, any communication with the Authorization Server MUST utilize TLS. See Section 16.17 of <xref target="OIDC"></xref> for more information on using TLS.</t>
</li>
<li><t>RP sends a token request to the OP <tt>/token</tt> endpoint containing the authorization <tt>code</tt>, following the specification described in the section 3.1.3.1. of <xref target="OIDC"></xref>. An example of this request can be found in section <eref target="#token-req">Token request</eref></t>
</li>
<li><t>The OP MUST validate that the client is correctly authenticated and MUST validate the request, following the specification in Section 3.1.3.2. of <xref target="OIDC"></xref>. In case of an error, the OP will return an error response as described in section <eref target="#err-resp">Error Response</eref>, and will use the error codes from Section 3.1.3.4. of <xref target="OIDC"></xref></t>
</li>
<li><t>If the validations are correct, the OP returns a successful response that includes an <tt>id_token</tt> and an <tt>access_token</tt> as described in Section 3.1.3.3. of <xref target="OIDC"></xref>. An example of such a response is: <eref target="#token-resp">Token response</eref>. RP must validate the token response as described in Section 3.1.3.5 of <xref target="OIDC"></xref>.</t>
</li>
</ol>
</section>
</section>
</section>

<section anchor="init-auth-endpoint"><name>Initiate Authorization Endpoint</name>
<t>This endpoint is a profile of the specification as defined in OAuth 2.0 Pushed Authorization Requests <xref target="OAuth.PAR"></xref>. See Section <eref target="#par-rest-ext">PAR Restrictions and Extension</eref> for more info regarding any differences relating to the PAR specification.</t>
<t>Initiate Authorization endpoint performs the validation of the request and stores the JWS that will be referenced as the <tt>request_uri</tt> in the Authorization Request.</t>

<section anchor="initi-auth-req"><name>Initiate Authorization Request</name>
<t>The Initiate Authorization Request follows the specification described in Section 2.1. of <xref target="OAuth.PAR"></xref>.</t>
<t>The OP MUST support the use of the HTTP POST method defined in <xref target="RFC2616"></xref> at the Initiate Authorization Endpoint. The Client uses a HTTPS POST to send a parameter <tt>request</tt> with a signed JWT that should contain the data explained in section 3.1.2.1 of <xref target="OIDC"></xref>. Request parameters are serialized using Form Serialization as described in section 13.2. of <xref target="OIDC"></xref>. This JWT is a &quot;Request Object&quot; as described in Section 6 of <xref target="OIDC"></xref>.</t>
<t>The Client MUST authenticate with the Initiate Authorization Endpoint using the authentication method registered for its <tt>client_id</tt>, as described in Section <eref target="#client-auth-methods">Client Authentication Methods.</eref></t>
<t>The following is a non-normative example of a Initiate Authorization Request. (line wraps within JWS for display purposes only)</t>

<artwork>POST /initiate-authorize HTTP/1.1
Host: op.example.com
Content-Type: application/x-www-form-urlencoded

 request=eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InJwX2tleV8yIn0.eyJpc3MiOiIzZGZkODllMS05NjRiLTRhYzQtYmE0Ni05NzdmYzVmODdkYjk
iLCJhdWQiOiJodHRwczovL29wLmV4YW1wbGUuY29tIiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJjbGllbnRfaWQiOiIzZGZkODllMS05NjRiLTRhYzQtYm
E0Ni05NzdmYzVmODdkYjkiLCJyZWRpcmVjdF91cmkiOiJodHRwczovL3JwLmV4YW1wbGUub3JnL2NiIiwic2NvcGUiOiJvcGVuaWQiLCJzdGF0ZSI6ImFmM
GlmanNsZGtqIiwibm9uY2UiOiJuLTAxMF9NMTZVMzEiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiZ2l2ZW5fbmFtZSI6eyJlc3NlbnRpYWwiOnRydWV9LCJm
YW1pbHlfbmFtZSI6eyJlc3NlbnRpYWwiOnRydWV9LCJwYXNzcG9ydF9udW1iZXIiOm51bGwsIm5hdGlvbmFsaXR5IjpudWxsLCJiaXJ0aGRhdGUiOnsiZXN
zZW50aWFsIjp0cnVlfSwicGxhY2Vfb2ZfYmlydGgiOm51bGx9fSwiaWF0IjoxNTY4NzI0OTQ5LCJuYmYiOjE1Njg3MjQ5NDksImV4cCI6MTU2ODcyNTAwOS
wianRpIjoiYTMyNGM5YWMtYTQ3Yy00MWE4LWFkM2ItMDY5M2IxODE3ZGM5In0.EojFJ5r_FgDGcQS9kjKgwgs759DN6MlS9di_LCnwN2le0PFo51fVYKLwu
pIfnCduY_i2iPgVuCMlx9UM5WV9FdogDf-r1BoF-cp9FLCCd8x-C9VIXKHTXO5jkQ-6jiOG1X00gK7s9-zL7DGlFjXYy8FKiyB1ByZ3onEI4IFFCnJyq3PuTK6UqIYVOOsQ_JgkQvtSdRFVF3jQUzT5bcZb8vGhLL8LGRktfa7CtI-6iHkZzRvcyQvB65hT3yUsC7qxA8UHazHN4n8jIh_vjoMmopMNhFnRzUdEQyuF5l25uJkr5gYbzcrzJPA0byTp4h186muiAxQKWookHSIUNO-ubQ
 &amp;client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
 &amp;client_assertion=eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InJwX3NlY19rZXkifQ.eyJpc3MiOiIzZGZkODllMS05NjRiL
TRhYzQtYmE0Ni05NzdmYzVmODdkYjkiLCJhdWQiOiJodHRwczovL29wLmV4YW1wbGUub3JnLyIsInN1YiI6IjNkZmQ4OWUxLTk2NGItNGFjNC1i
YTQ2LTk3N2ZjNWY4N2RiOSIsImlhdCI6MTU3MDAyMjU3NiwibmJmIjoxNTcwMDIyNTc2LCJleHAiOjE1NzAwMjI2MzYsImp0aSI6IjcwMzNhMDV
lLWQyOGEtNGMwMi04ZTZiLWUzZDI2YzRjZTk5MyJ9.N_sUjuLY9CrGFSLIiow-2I6zqtdCPUMt31St9rQCK9nDmglkyyCj3ZJvvxjNE-c6H6wK7
mEbL5d1StP1dhK7iARAkDH-7Jm-CxmcnmvbiqINkVjjkzrww3BMfwa87MPXga7C8-5u8VXokbfiCflqFKbQFbKK7MjCz34loM6Mj6fHkV4HYNVD
zAZv7zPKqjk-WRDJtVRjB2ON0ibVjEL-iNdZQLyN7nm8rto3xB7af5wfTJuvsXIIC1G--vHUZ6A9IxP84fR636IxSSUo8Y76Bp4ShmfqeD0jvTn
er1U2j77B_X01_3gbLAk6Gz48CPfZsDC6c6jW56mt99YZvjf5DQ
</artwork>
</section>

<section anchor="initiate-authorization-request-validation"><name>Initiate Authorization Request Validation</name>
<t>The Authorization Server MUST validate the request received as follows:</t>

<ol>
<li><t>The Authorization Server MUST verify that the Client authentication is valid.</t>
</li>
<li><t>The Authorization Server MUST verify that the request fulfils all validations described in section 3.1.2.2 of <xref target="OIDC"></xref>.</t>
</li>
<li><t>The Authorization Server MUST verify that the request object is a valid JWS, the signature algorithm is not <tt>none</tt>, and the signature is correct as in section 6.3 of <xref target="OIDC"></xref>.</t>
</li>
<li><t>The Authorization Server MUST verify that Client is asking for user claims using the scopes (including scope templates) or claims parameter, as described in section 5.4. and 5.5. of <xref target="OIDC"></xref>.</t>
</li>
</ol>
<t>If the Authorization Server encounters any error, it MUST return an error response, as per Section <eref target="{#err-init-auth-resp}">Initiate Authorization Error Response</eref> in this document.</t>
</section>

<section anchor="succ-init-auth-resp"><name>Successful Initiate Authorization Response </name>
<t>If the verification is successful, the authorization server shall generate a request URI and return a JSON payload that contains <tt>request_uri</tt> and <tt>expires_in</tt> claims at the top level with 201 Created HTTP response code, as described in Section 2.2. of <xref target="OAuth.PAR"></xref>.</t>
<t>The <tt>request_uri</tt> shall be based on a cryptographic random value so that it is difficult to predict for an attacker. The <tt>request_uri</tt> shall be bound to the client identifier of the client that posted the request object. Since the <tt>request_uri</tt> can be replayed, its lifetime should be short and preferably limited to one-time use.</t>
<t>The value of these claims in the JSON payload shall be as follows:</t>

<ul>
<li><t><tt>request_uri</tt>: The request URI corresponding to the request object posted.</t>
</li>
<li><t><tt>expires_in</tt>: A JSON number that represents the lifetime of the request URI in seconds. The request URI lifetime is at the discretion of the OP.</t>
</li>
<li><t><tt>errors</tt>: See section <eref target="#error-member">errors member in Successful Initiate Authorization Response</eref> for more info about this field.</t>
</li>
</ul>
<t>The following is a non-normative example of a Initiate Authorization Successful Response:</t>

<artwork>HTTP/1.1 201 Created
Date: Tue, 2 May 2017 15:22:31 GMT
Content-Type: application/json

{
    &quot;request_uri&quot;: &quot;urn:example:Y7AyOKAK&quot;,
    &quot;expires_in&quot;: 3600,
	&quot;errors&quot;: { &quot;group&quot;: &quot;id_token&quot;,&quot;key&quot;: &quot;familo_name&quot;,&quot;description&quot;: &quot;unknown claim.&quot;}
}
</artwork>
<t>Note that <tt>request_uri</tt> can be either a URL or URN - within this spec it is hosted by the authorization server. The advantage of the authorization server hosting the request object is that it does not have to support outbound requests to a client specified request URI, nor rely on the entropy of the URI for the confidentiality of the request object.</t>
<t>When the request object is stored on the authorization server, the <tt>request_uri</tt> value typically is a <xref target="URN"></xref>.</t>
</section>

<section anchor="err-init-auth-resp"><name>Initiate Authorization Error Response </name>
<t>A Initiate Authorization Error Response is an OAuth 2.0 Authorization Error Response message returned from the OP's Authorization Endpoint in response to the Initiate Authorization Request message sent by the RP. The error response will follow the specification described in Section <eref target="#err-resp">Error Response</eref>.</t>
<t>In addition to the error codes defined in Section 4.1.2.1 of OAuth 2.0 Authorization Framework <xref target="OAuth2.0"></xref>, this specification also defines the following error codes:</t>

<ul>
<li><t><tt>invalid_request_object</tt>: The parameters inside the request object are invalid, it is signed with <tt>none</tt> algorithm or the signature is not correct.</t>
</li>
<li><t><tt>invalid_request</tt>: The request does not contain the parameter <tt>request</tt>.</t>
</li>
<li><t><tt>method_not_allowed</tt>: If the request was not POST, the authorization server MUST return a HTTP 405 Method Not Allowed status code.</t>
</li>
<li><t><tt>too_many_request</tt>: If the request from the client per a specified time period goes beyond the number the authorization server allows, then the authorization server MUST return a HTTP 429 Too Many Requests status code.</t>
</li>
</ul>
<t>The following is a non-normative example of an Initiate Authorization Error Response:</t>

<artwork>HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 &quot;error&quot;: &quot;invalid_request_object&quot;,
 &quot;error_description&quot;: &quot;Incorrect signature&quot;
}
</artwork>
</section>

<section anchor="initiate-authorization-response-validation"><name>Initiate Authorization Response Validation</name>
<t>The Client MUST validate that the Inititate Authorization Response contains valid <tt>request_uri</tt> and <tt>expires_in</tt> parameters.</t>
</section>

<section anchor="error-member"><name><em>errors</em> member in Successful Initiate Authorization Response </name>
<t>This specification adds an additional field called <tt>errors</tt> in the successful response of the initiate authorize response,. The original fields (<tt>request_uri</tt> and <tt>expires_in</tt>) are described in in Section 2.2. of <xref target="OAuth.PAR"></xref>.</t>
<t>The <tt>errors</tt> member is an OPTIONAL field of type array that contains a list of errors that are detected in the <tt>claims</tt> request parameter (see section 5.5. of <xref target="OIDC"></xref>.</t>
<t>The purpose of this new field is to avoid the RP having to wait until the end of the process when exchanging the code for the <tt>id_token</tt> in the <tt>/token</tt> endpoint or when obtaining the claims in the user info endpoint using the <tt>access_token</tt> to know about an error in the request syntax. These fields give the RP instant feedback in the success response, meaning the RP can continue with the process, whilst being informed about the issue.</t>
<t>The following is a non-normative example of a <tt>errors</tt> member structure</t>

<artwork>&quot;errors&quot;: [
	{ 
		&quot;group&quot;: &quot;id_token&quot;,
		&quot;key&quot;: &quot;familo_name&quot;,
		&quot;description&quot;: &quot;unknown claim.&quot;
	},
	{
		&quot;group&quot;: &quot;userinfo&quot;,
		&quot;key&quot;: &quot;given_name&quot;,
		&quot;description&quot;: &quot;unknown member inside claim&quot;
	}
]
</artwork>
<t>Each array object contains the following fields:</t>

<ul>
<li><t><tt>group</tt>: The group <tt>id_token</tt> or <tt>userinfo</tt> where a claim is requested.</t>
</li>
<li><t><tt>key</tt>: The claim name that contains the problem.</t>
</li>
<li><t><tt>description</tt>: An error description to help the RP developer.</t>
</li>
</ul>
</section>

<section anchor="par-rest-ext"><name>PAR Restrictions and Extension</name>
<t>The Initiate Authorization Endpoint has some restrictions or add ons to the original specification as described in <xref target="OAuth.PAR"></xref>.</t>

<ol>
<li><t>The endpoint recommended name is <tt>/initiate-authorize</tt>.</t>
</li>
<li><t>The OP SHALL require the use of a request object sent in the request parameter.</t>
</li>
<li><t>The OP SHALL support only signed JWT request objects. This means that the OP SHALL REQUIRE a request parameter.</t>
</li>
<li><t>The OP SHALL ONLY allow <em>response_type</em> with value <tt>code</tt>.</t>
</li>
<li><t>The OP SHALL only support the client authentication methods as described in Section <eref target="#client-auth-methods">Client Authentication Methods</eref>.</t>
</li>
<li><t>The OP MAY NOT implement the error validation described in Section &quot;2.3.1.5. Request entity too large&quot; of <xref target="OAuth.PAR"></xref>.</t>
</li>
<li><t>The OP SHALL REQUIRE a scope param containing the value <tt>openid</tt>.</t>
</li>
<li><t>The OP MAY return the <tt>errors</tt> field in the Successful Initiate Authorization Response to help the RP.</t>
</li>
</ol>
</section>
</section>

<section anchor="txn-claim"><name>txn Claim</name>
<t>As part of this specification a new claim called txn should be introduced by the OP in all of the <tt>id_tokens</tt> generated and also in the <tt>/userinfo</tt> endpoint responses. This claim, as defined in <xref target="RFC8417"></xref>, is used in the context of this extension to build audit trails across the parties involved in an OpenID Connect transaction.</t>
<t>This transaction data MUST be stored as long as it is required to store transaction data for auditing purposes by any respective regulation.</t>
<t>The <tt>txn</tt> value MUST allow an RP to obtain these transaction details if needed.</t>
<t>Note: The mechanism to obtain the transaction details from the OP and their format is out of scope of this specification.</t>
</section>

<section anchor="openid-restrictions-and-extensions"><name>OpenID Restrictions and Extensions</name>

<section anchor="client-aka-rp"><name>Client (aka RP)`</name>
<t>A client specification statements are:</t>

<ol>
<li><t>MAY support mutual TLS connections.</t>
</li>
<li><t>If mutual TLS is not possible, the client SHALL communicate with the Authorization Server using TLS. See Section 16.17 of <xref target="OIDC"></xref> for more information on using TLS.</t>
</li>
<li><t>SHALL authenticate when making requests to the Authentication Server at the <tt>/token</tt> and <tt>/initiate-authorize</tt> endpoints, as described in Section <eref target="#client-auth-methods">Client Authentication Methods</eref>.</t>
</li>
<li><t>SHALL include the <tt>request_uri</tt> parameter as defined in Section 6 of <xref target="OIDC"></xref> in the authentication request;</t>
</li>
<li><t>SHALL additionally send duplicates of the parameters/values using the OAuth 2.0 request syntax, where required by the OAuth specification.</t>
</li>
<li><t>SHALL use the initiate authorize endpoint before calling the authentication request, as described in section <eref target="#init-auth-endpoint">Initiate Authorization Endpoint</eref> of this specification.</t>
</li>
<li><t>SHALL sign the JWT request object that is sent to the initiate authorize endpoint, as described in Section 6.1. of <xref target="OIDC"></xref>.</t>
</li>
<li><t>SHALL NOT use the <tt>none</tt> algorithm in JWT.</t>
</li>
<li><t>SHALL require and validate the JWS signed ID Token to be returned from the token endpoint.</t>
</li>
<li><t>SHALL include the <tt>nonce</tt> parameter in the authentication request, as described in Section 3.1.2.1 of <xref target="OIDC"></xref>,</t>
</li>
<li><t>Is RECOMMENDED to include the <tt>state</tt> parameters in the authentication request, as described in Section <em>3.1.2.1</em> of <xref target="OIDC"></xref>,</t>
</li>
<li><t>SHALL use the <tt>claims</tt> parameter inside the JWT request Object, which is the preferred method for requesting claims as described in section 5.5. of <xref target="OIDC"></xref></t>
</li>
<li><t>MAY use a scope template as an alternative to request claims.</t>
</li>
<li><t>SHALL include <tt>openid</tt> value as the scope in all authorization requests.</t>
</li>
<li><t>SHALL use the PCKE as described in <xref target="OAuth.NativeApps"></xref> for any native app clients.</t>
</li>
</ol>
</section>

<section anchor="authentication-server-aka-op"><name>Authentication server (aka OP)</name>
<t>The authorization server specification statements are:</t>

<ol>
<li><t>SHALL NOT support public clients.</t>
</li>
<li><t>MAY support mutual TLS connections.</t>
</li>
<li><t>If mutual TLS is not possible, Authorization Server SHALL require the use of TLS in these endpoints. See Section 16.17 of <xref target="OIDC"></xref> for more information on using TLS.</t>
</li>
<li><t>SHALL validate for the <tt>/token</tt> and <tt>/initiate-authorize</tt> endpoints that the Client is authenticated as described in Section <eref target="#client-auth-methods">Client Authentication Methods</eref>.</t>
</li>
<li><t>SHALL require the <tt>response_type</tt> value <tt>code</tt>;</t>
</li>
<li><t>SHALL require a signed JWT request object, as described in Section 6.1. of <xref target="OIDC"></xref></t>
</li>
<li><t>SHALL require the <tt>request_uri</tt> parameter as defined in Section 6 of <xref target="OIDC"></xref> in the authentication request;</t>
</li>
<li><t>SHALL require that the <tt>request_uri</tt> has been generated by the OP in the endpoint <tt>/initiate-authorize</tt> and indicates the location of a JWT Request inside the Authentication Server.</t>
</li>
<li><t>SHALL support the <tt>/initiate-authorize</tt> endpoint, as described in section <eref target="#initi-auth-req">Initiate Authorization Request</eref> of this specification.</t>
</li>
<li><t>SHALL return a signed ID Token. (JWS)</t>
</li>
<li><t>SHALL ignore additional parameters passed using the OAuth 2.0 request syntax in the <tt>/authorize</tt> endpoint. Only the <tt>client_id</tt> param should be passed - this will be used to identify the RP. The parameters for authorization should be passed inside the request_object for the <tt>/initiate-authorize</tt> endpoint, and not at the <tt>/authorize</tt> endpoint. This statement contradicts section 6.1. of <xref target="OIDC"></xref></t>
</li>
<li><t>SHALL validate the <tt>openid</tt> value is present in the scope for all authorization requests.</t>
</li>
<li><t>SHALL generate and include the <tt>txn</tt> claim in all the generated <tt>id_tokens</tt> and claim responses (user info) to maintain an audit trail and traceability for all Open ID processes. (From beginning to end of the transaction)</t>
</li>
</ol>
</section>
</section>

<section anchor="err-resp"><name>Error Response</name>
<t>When the Authorization Server should return an error to the Client because of any reason, the returned structure for the Error Response will be as defined in section 5.2. of <xref target="OAuth2.0"></xref>.</t>
<t>In the case that the Error Response is returned in a direct communication between the OP and the RP, the error response parameters will be returned in the HTTP response body using the application/json media type with HTTP response code of 400 (unless specified otherwise). As described in Section 3.1.3.4. of <xref target="OIDC"></xref>.</t>
<t>The following is a non-normative example Error Response for this case:</t>

<artwork>  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store
  Pragma: no-cache

  {
   &quot;error&quot;: &quot;invalid_request&quot;,
   &quot;error_description&quot;: &quot;Unsupported response_type value&quot;
  }
</artwork>
<t>In the case that the Error Response is returned in a redirection step (like Authentication Request) the error response parameters are added to the query component of the Redirection URI, unless a different Response Mode was specified as described in Section 3.1.2.6. of <xref target="OIDC"></xref>.</t>

<artwork>  HTTP/1.1 302 Found
  Location: https://rp.example.com/cb?
    error=invalid_request
    &amp;error_description=Unsupported%20response_type%20value
</artwork>
</section>

<section anchor="authorization-server-metadata"><name>Authorization Server Metadata</name>
<t>If the authorization server implements the DTP profile, it SHOULD include the following OAuth/OpenID Provider Metadata parameter in discovery responses:</t>

<ul>
<li><t><tt>digital_trust_protocol_extension</tt> : A boolean field with value <em>true</em> to inform the RP that this OP implements this profile.</t>
</li>
</ul>
</section>

<section anchor="security-considerations"><name>Security Considerations</name>

<section anchor="native-apps"><name>Native Apps</name>
<t>For authorizing users in native apps, the best practice described in RFC <xref target="OAuth.NativeApps"></xref> should be followed - for example the use of PKCE in the authorization flow.</t>
</section>

<section anchor="client-auth-methods"><name>Client Authentication Methods</name>
<t>To enhance security, implementations MUST only support and allow <tt>private_key_jwt</tt> as the Client Authentication method, as described in Section 9. of <xref target="OIDC"></xref>.</t>
<t>The reasons that this specification does not allow other Client Authentication Methods are:</t>

<ul>
<li><t><tt>none</tt>: is not an authentication method, so is not allowed.</t>
</li>
<li><t><tt>client_secret_basic</tt> and <tt>client_secret_post</tt> send over the network the complete credential that can be intercepted.</t>
</li>
<li><t><tt>client_secret_jwt</tt> is based on a shared secret and is a less secure version of the <tt>private_key_jwt</tt>.</t>
</li>
<li><t><tt>tls_client_auth</tt> and <tt>self_signed_tls_client_auth</tt> described in the specification <xref target="OAuth.MTLS"></xref>, are discarded because  they bind the Network and Authentication layer.</t>
</li>
</ul>
<t>During the Client Registration, the RP (Client) MUST register a Client Authentication method. If no method is registered, the default method is <tt>private_key_jwt</tt>.</t>
<t>The supported Client Authentication Methods MAY be expanded in the future if other methods are provided by other implementers that commit to ensuring compliance with the security level provided by this specification.</t>
<t>The next is a non normative example of a JWT bearer following the specification of a private<em>key</em>jwt method: (line wraps within JWS for display purposes only)</t>

<artwork>eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InJwX3NlY19rZXkifQ.eyJpc3MiOiIzZGZkODllMS05NjRiLTRhYzQtY
mE0Ni05NzdmYzVmODdkYjkiLCJhdWQiOiJodHRwczovL29wLmV4YW1wbGUub3JnLyIsInN1YiI6IjNkZmQ4OWUxLTk2NGItNGFjN
C1iYTQ2LTk3N2ZjNWY4N2RiOSIsImlhdCI6MTU3MDAyMjU3NiwibmJmIjoxNTcwMDIyNTc2LCJleHAiOjE1NzAwMjI2MzYsImp0a
SI6IjcwMzNhMDVlLWQyOGEtNGMwMi04ZTZiLWUzZDI2YzRjZTk5MyJ9.N_sUjuLY9CrGFSLIiow-2I6zqtdCPUMt31St9rQCK9nD
mglkyyCj3ZJvvxjNE-c6H6wK7mEbL5d1StP1dhK7iARAkDH-7Jm-CxmcnmvbiqINkVjjkzrww3BMfwa87MPXga7C8-5u8VXokbfi
CflqFKbQFbKK7MjCz34loM6Mj6fHkV4HYNVDzAZv7zPKqjk-WRDJtVRjB2ON0ibVjEL-iNdZQLyN7nm8rto3xB7af5wfTJuvsXII
C1G--vHUZ6A9IxP84fR636IxSSUo8Y76Bp4ShmfqeD0jvTner1U2j77B_X01_3gbLAk6Gz48CPfZsDC6c6jW56mt99YZvjf5DQ
</artwork>
</section>

<section anchor="initiate-authorize-endpoint-phishing"><name>Initiate authorize endpoint phishing</name>
<t>In this attack, the RP developer has been socially engineered into believing that the <tt>/initiate-authorize</tt> endpoint has been changed to a URL that is still controlled by the original OP, when it is actually controlled by an attacker. As a result, the client could send sensitive details to a rogue OP and the attacker will get hold of sensitive data.</t>
<t>This can be partially mitigated by having the RP enquire to the value of the above endpoint by calling the well known configuration endpoint. Alternatively, a JWE could be used when sending requests.</t>
</section>

<section anchor="token-endpoint-phishing"><name>Token endpoint phishing</name>
<t>In this attack, the RP developer has been socially engineered into believing that the <tt>/token</tt> endpoint has been changed to a URL that is still controlled by the original OP, when it is actually controlled by an attacker. As a result, the client could send an authorization code and valid credentials to a rogue OP. The attacker could then use them to retrieve the token from an legitimate OP.</t>
<t>This can be partially mitigated by having the RP enquire to the value of the above endpoint by calling the well known configuration endpoint. Alternatively the token can be returned encrypted as a JWE.</t>
<t>Mutual TLS will prevent this attack, since the token endpoint cannot be called without a valid client certificate.</t>
</section>

<section anchor="cryptographic-considerations"><name>Cryptographic Considerations</name>

<section anchor="tls-considerations"><name>TLS considerations</name>
<t>The minimum version of the TLS MUST be v1.2.</t>
<t>Only use ciphersuites that ensure perfect forward secrecy (PFS), as well as authenticated encryption with associated data (AEAD). Therefore, encryption should be with either AES with GCM or CHACHA20 with POLY1305, whilst key exchange and authentication SHOULD be part of ECDHE<em>RSA, ECDHE</em>ECDSA, DHE<em>RSA, DHE</em>DSS, CECPQ1 (together with all TLS 1.3 ciphers).</t>
<t>Examples of valid ciphers:</t>

<artwork>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
</artwork>
</section>

<section anchor="jws-signing-algorithms-considerations"><name>JWS signing algorithms considerations</name>
<t>The following alghorithms SHALL NOT be allowed:
 * <em>none:</em> It does not provide any form of authenticity nor integrity
 * <em>hmac:</em> It relies on the knowledge of a pre-shared key between the OP and RP</t>
<t>It is reccomended to
1.  Not use PKCS #1 v1.5 (RS256, RS384, RS512)
2.  Use PS256, ES256 or better</t>
</section>
</section>
</section>

<section anchor="data-examples"><name>Data Examples</name>
<t>The following sections show examples about requests and responses that are used in the protocol flow.</t>

<section anchor="auth-redirect-resp"><name>Authorize redirect response</name>
<t>The following is a non-normative example of a response from RP to the customer to start the authentication process. This redirect follows the Section 3.1.2.1 of <xref target="OIDC"></xref></t>

<artwork>HTTP/1.1 302 Found
Location: https://op.example.com/authorize
    ?client_id=3dfd89e1-964b-4ac4-ba46-977fc5f87db9
    &amp;request_uri=urn:example:Y7AyOKAK
</artwork>
<t>Note that since we are using <xref target="OAuth.PAR"></xref> the <tt>client_id</tt> param can be omitted and used inside the request object.</t>
</section>

<section anchor="auth-req"><name>Authentication request</name>
<t>The following is a non-normative example of an authentication request to the <tt>/authorize</tt> endpoint in OP. This request follows the specification defined in Section 3.1.2.1 of <xref target="OIDC"></xref></t>
<t>This request is the result of the redirection response <eref target="#auth-redirect-resp">Authorize redirect response</eref>. As explained in the <eref target="#auth-redirect-resp">Authorize redirect response</eref> example, the <tt>client_id</tt> param can be omitted here.</t>

<artwork>GET /authorize
  ?client_id=3dfd89e1-964b-4ac4-ba46-977fc5f87db9
  &amp;request_uri=urn:example:Y7AyOKAK

Host: op.example.com
</artwork>
</section>

<section anchor="succ-auth-resp"><name>Successful Authorize response</name>
<t>The following is a non-normative example of a response from the OP when the customer Authenticates and consents to share the information. This response follows the specification as described in Section 3.1.2.5. of <xref target="OIDC"></xref></t>

<artwork>HTTP/1.1 302 Found
Location: https://rp.example.com/cb
    ?code=SplxlOBeZQQYbYS6WxSbIA
    &amp;state=af0ifjsldkj
</artwork>
</section>

<section anchor="callback-req"><name>Callback RP request</name>
<t>The following is a non-normative example of a request to the callback RP endpoint containing the <tt>code</tt> and <tt>state</tt>.</t>

<artwork>GET /cb
    ?code=SplxlOBeZQQYbYS6WxSbIA
    &amp;state=af0ifjsldkj

Host: rp.example.com
</artwork>
</section>

<section anchor="token-req"><name>Token request</name>
<t>The following is a non-normative example of a Token Request following the specification as described in section 3.1.3.1. of <xref target="OIDC"></xref>.</t>
<t>The Client MUST be authenticated to the Token Endpoint using the authentication method registered for its <tt>client_id</tt> as described in Section <eref target="#client-auth-methods">Client Authentication Methods</eref>.</t>

<artwork>POST /token HTTP/1.1
Host: op.example.com
Content-Type: application/x-www-form-urlencoded
 ?grant_type=authorization_code
 &amp;code=SplxlOBeZQQYbYS6WxSbIA
 &amp;redirect_uri=https://rp.example.org/cb
 &amp;client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
 &amp;client_assertion=eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InJwX3NlY19rZXkifQ.eyJpc3MiOiIzZGZkODllMS05NjRiL
TRhYzQtYmE0Ni05NzdmYzVmODdkYjkiLCJhdWQiOiJodHRwczovL29wLmV4YW1wbGUub3JnLyIsInN1YiI6IjNkZmQ4OWUxLTk2NGItNGFjNC1i
YTQ2LTk3N2ZjNWY4N2RiOSIsImlhdCI6MTU3MDAyMjU3NiwibmJmIjoxNTcwMDIyNTc2LCJleHAiOjE1NzAwMjI2MzYsImp0aSI6IjcwMzNhMDV
lLWQyOGEtNGMwMi04ZTZiLWUzZDI2YzRjZTk5MyJ9.N_sUjuLY9CrGFSLIiow-2I6zqtdCPUMt31St9rQCK9nDmglkyyCj3ZJvvxjNE-c6H6wK7
mEbL5d1StP1dhK7iARAkDH-7Jm-CxmcnmvbiqINkVjjkzrww3BMfwa87MPXga7C8-5u8VXokbfiCflqFKbQFbKK7MjCz34loM6Mj6fHkV4HYNVD
zAZv7zPKqjk-WRDJtVRjB2ON0ibVjEL-iNdZQLyN7nm8rto3xB7af5wfTJuvsXIIC1G--vHUZ6A9IxP84fR636IxSSUo8Y76Bp4ShmfqeD0jvTn
er1U2j77B_X01_3gbLAk6Gz48CPfZsDC6c6jW56mt99YZvjf5DQ
</artwork>
</section>

<section anchor="token-resp"><name>Token response</name>
<t>The following is a non-normative example of a token response following the specifications as described in Section 3.1.3.3. of <xref target="OIDC"></xref>.</t>
<t>The <tt>id_token</tt> parameter is explained in section <eref target="#id-token-example">ID token example</eref> (with line wraps within values for display purposes only)</t>

<artwork>HTTP/1.1 200 OK
  Content-Type: application/json
  Cache-Control: no-store
  Pragma: no-cache

  {
   &quot;access_token&quot;: &quot;SlAV32hkKG&quot;,
   &quot;token_type&quot;: &quot;Bearer&quot;,
   &quot;refresh_token&quot;: &quot;8xLOxBtZp8&quot;,
   &quot;expires_in&quot;: 3600,
   &quot;id_token&quot;: &quot;eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6Im9wX2tleV8xIn0.eyJpc3MiOiJodHRwczovL29wLmV4YW1wbGUub
3JnLyIsImF1ZCI6Imh0dHBzOi8vcnAuZXhhbXBsZS5jb20iLCJzdWIiOiIxNDI1MzY3NDgiLCJub25jZSI6Im4tMDEwX00xNlUzMSIsImF0X2hhc2
giOiJ6MGNZbk9OQmM5VGRoZ1JVZGxKM0RPNkFyTDJNLXZfNzBpUGo5bG5BbG5RIiwiZ2l2ZW5fbmFtZSI6IkphbmUiLCJmYW1pbHlfbmFtZSI6IkR
vZSIsImJpcnRoZGF0ZSI6IjE5OTAtMDEtMzAiLCJjZXJ0aWZpZWRfY2xhaW1zIjp7ImNlcnRpZmllZF9naXZlbl9uYW1lIjp7InZhbHVlIjoiSmFu
ZSIsImVudGl0eSI6IlNhbnRhbmRlciIsImxvYSI6M30sImNlcnRpZmllZF9mYW1pbHlfbmFtZSI6eyJ2YWx1ZSI6IkRvZSIsImVudGl0eSI6IlNhb
nRhbmRlciIsImxvYSI6M30sImNlcnRpZmllZF9uYXRpb25hbGl0eSI6eyJ2YWx1ZSI6IkJyaXRpc2giLCJlbnRpdHkiOiJTYW50YW5kZXIiLCJsb2
EiOjN9LCJjZXJ0aWZpZWRfYmlydGhkYXRlIjp7InZhbHVlIjoiMTk5MC0wMS0zMCIsImVudGl0eSI6IlNhbnRhbmRlciIsImxvYSI6M319LCJpYXQ
iOjE1NjgzNzk4ODQsImV4cCI6MTU2ODM3OTk0NH0.chwTi-Pt9A7t2O1WvAGQzxNBIoQKbxlDThLa946hgNvtMlbPuIdnMfsbxDBZb-paF0JdEXyhHNQvX9AqqZ7j9rfOJrMYqSawmUJCyjO9IppSuucZ3eVcHPzcSuOCdWQl0GQ8rBtFZJbTbX4SP5oavLLb-hZgC-F86Gt-_jAE6sT-zXAR9zsQ4IASNjGJHAbpD36NTK6HC4TsOa77b8cJtYKbwqqBqFDcnyi1uwOusbdg_zI6M5wRpMWIF0LQBiLVnYX-n4gAwWyeGuB4_7iMLfSvIsL0hzaq7pMsRqikHnIceBSfklaEnWyiRdhf0tPNajIaho6pLKAXdWnrCk7DWw&quot;
  }
</artwork>
</section>

<section anchor="jws-request-object"><name>JWS request object</name>
<t>The following is a non-normative example of an authorization request JWT. This example follows the specification as described in Section 6. of <xref target="OIDC"></xref>.</t>
<t>The request object contains the requested claims inside the payload as described in section 5.5. of <xref target="OIDC"></xref>. Apart from using scopes as templates, this is the preferred way to request claims instead the scope directly. Any additional JWT objects MUST contain the next claims:</t>

<ul>
<li><t><tt>nbf</tt>: The time before which the signed authentication request is unacceptable</t>
</li>
<li><t><tt>jti</tt>: A unique identifier for the signed authentication request.</t>
</li>
</ul>
<t>The reason for these two claims is to avoid an attacker in control of the clock on the client side to generate a long lived JWT Authentication request.</t>

<sourcecode type="json">{
   &quot;iss&quot;: &quot;3dfd89e1-964b-4ac4-ba46-977fc5f87db9&quot;,
   &quot;aud&quot;: &quot;https://op.example.com&quot;,
   &quot;response_type&quot;: &quot;code&quot;,
   &quot;client_id&quot;: &quot;3dfd89e1-964b-4ac4-ba46-977fc5f87db9&quot;,
   &quot;redirect_uri&quot;: &quot;https://rp.example.org/cb&quot;,
   &quot;scope&quot;: &quot;openid&quot;,
   &quot;state&quot;: &quot;af0ifjsldkj&quot;,
   &quot;nonce&quot;: &quot;n-010_M16U31&quot;,
   &quot;claims&quot;:
    {
     &quot;id_token&quot;:
      {
        &quot;given_name&quot;: {&quot;essential&quot;: true},
        &quot;family_name&quot;: {&quot;essential&quot;: true},
        &quot;passport_number&quot;: null,
        &quot;nationality&quot;: null,
        &quot;birthdate&quot;: {&quot;essential&quot;: true},
        &quot;place_of_birth&quot;: null
      }
    }
}
</sourcecode>
<t>Signing it with the <tt>RS512</tt> algorithm results in this Request Object value <xref target="JWS"></xref>. This value is used in the request <eref target="#auth-req">Authentication request</eref>.</t>
<t> (line wraps within values for display purposes only)</t>

<artwork>eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6InJwX2tleV8yIn0.eyJpc3MiOiIzZGZkODllMS05NjRiLTRhYzQtYmE0Ni05NzdmYzVmODdk
YjkiLCJhdWQiOiJodHRwczovL29wLmV4YW1wbGUuY29tIiwicmVzcG9uc2VfdHlwZSI6ImNvZGUiLCJjbGllbnRfaWQiOiIzZGZkODllMS05NjRiLTRh
YzQtYmE0Ni05NzdmYzVmODdkYjkiLCJyZWRpcmVjdF91cmkiOiJodHRwczovL3JwLmV4YW1wbGUub3JnL2NiIiwic2NvcGUiOiJvcGVuaWQiLCJzdGF0
ZSI6ImFmMGlmanNsZGtqIiwibm9uY2UiOiJuLTAxMF9NMTZVMzEiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiZ2l2ZW5fbmFtZSI6eyJlc3NlbnRpYWwi
OnRydWV9LCJmYW1pbHlfbmFtZSI6eyJlc3NlbnRpYWwiOnRydWV9LCJwYXNzcG9ydF9udW1iZXIiOm51bGwsIm5hdGlvbmFsaXR5IjpudWxsLCJiaXJ0
aGRhdGUiOnsiZXNzZW50aWFsIjp0cnVlfSwicGxhY2Vfb2ZfYmlydGgiOm51bGx9fSwiaWF0IjoxNTY4NzI0OTQ5LCJuYmYiOjE1Njg3MjQ5NDksImV4
cCI6MTU2ODcyNTAwOSwianRpIjoiYTMyNGM5YWMtYTQ3Yy00MWE4LWFkM2ItMDY5M2IxODE3ZGM5In0.EojFJ5r_FgDGcQS9kjKgwgs759DN6MlS9di_
LCnwN2le0PFo51fVYKLwupIfnCduY_i2iPgVuCMlx9UM5WV9FdogDf-r1BoF-cp9FLCCd8x-C9VIXKHTXO5jkQ-6jiOG1X00gK7s9-zL7DGlFjXYy8FKiyB1ByZ3onEI4IFFCnJyq3PuTK6UqIYVOOsQ_JgkQvtSdRFVF3jQUzT5bcZb8vGhLL8LGRktfa7CtI-6iHkZzRvcyQvB65hT3yUsC7qxA8UHazHN4n8jIh_vjoMmopMNhFnRzUdEQyuF5l25uJkr5gYbzcrzJPA0byTp4h186muiAxQKWookHSIUNO-ubQ
</artwork>
<t>This JWS can be validated using the <eref target="#example-keys">Example Keys</eref></t>
</section>

<section anchor="id-token-example"><name>ID token example</name>
<t>The following is a non-normative example of an <tt>id_token</tt> returned by the OP following the specifications as described in Section 2. of <xref target="OIDC"></xref>.</t>

<sourcecode type="json">{
   &quot;iss&quot;: &quot;https://op.example.org/&quot;,
   &quot;aud&quot;: &quot;3dfd89e1-964b-4ac4-ba46-977fc5f87db9&quot;,
   &quot;sub&quot;: &quot;142536748&quot;,
   &quot;txn&quot;: &quot;V1StGXR8_Z5jdHi6B-myT&quot;,
   &quot;nonce&quot;: &quot;n-010_M16U31&quot;,
   &quot;at_hash&quot;:&quot;z0cYnONBc9TdhgRUdlJ3DO6ArL2M-v_70iPj9lnAlnQ&quot;,
   &quot;given_name&quot;: &quot;Jane&quot;,
   &quot;family_name&quot; : &quot;Doe&quot;,
   &quot;birthdate&quot;: &quot;1990-01-30&quot;
}
</sourcecode>
<t>After signing the JWT and add the mandatory claims, we obtain the next <xref target="JWS"></xref>. (line wraps within values for display purposes only)</t>

<artwork>eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6Im9wX2tleV8xIn0.eyJpc3MiOiJodHRwczovL29wLmV4YW1wbGUub3JnLyIsIm
F1ZCI6IjNkZmQ4OWUxLTk2NGItNGFjNC1iYTQ2LTk3N2ZjNWY4N2RiOSIsInN1YiI6IjE0MjUzNjc0OCIsIm5vbmNlIjoibi0wMTBfTTE2
VTMxIiwiYXRfaGFzaCI6InowY1luT05CYzlUZGhnUlVkbEozRE82QXJMMk0tdl83MGlQajlsbkFsblEiLCJnaXZlbl9uYW1lIjoiSmFuZS
IsImZhbWlseV9uYW1lIjoiRG9lIiwiYmlydGhkYXRlIjoiMTk5MC0wMS0zMCIsImNlcnRpZmllZF9jbGFpbXMiOnsiY2VydGlmaWVkX2dp
dmVuX25hbWUiOnsidmFsdWUiOiJKYW5lIiwiZW50aXR5IjoiU2FudGFuZGVyIiwibG9hIjozfSwiY2VydGlmaWVkX2ZhbWlseV9uYW1lIj
p7InZhbHVlIjoiRG9lIiwiZW50aXR5IjoiU2FudGFuZGVyIiwibG9hIjozfSwiY2VydGlmaWVkX25hdGlvbmFsaXR5Ijp7InZhbHVlIjoi
QnJpdGlzaCIsImVudGl0eSI6IlNhbnRhbmRlciIsImxvYSI6M30sImNlcnRpZmllZF9iaXJ0aGRhdGUiOnsidmFsdWUiOiIxOTkwLTAxLT
MwIiwiZW50aXR5IjoiU2FudGFuZGVyIiwibG9hIjozfX0sImlhdCI6MTU2ODc5NTI4NywibmJmIjoxNTY4Nzk1Mjg3LCJleHAiOjE1Njg3
OTUzNDcsImp0aSI6ImY5MTdkMDcxLTE4NDItNGRkOC1iODZmLTJhN2YwNDIzYzdhMiJ9.d2GDd1Qm_xnb9-Vg12oE3xzgp_Qn4hTEM-gcZ
EL5kohM44E5JKZbSpgmnKAQMn-fYDl1y5kExaNbruzzu2F2Rsk976YJxKd_R8Wg67FhMFqbOGn71vGRGxT47LhXdCVy1_H0ptoJ8K8hJW3
3HOrMHoaSQjoKcoBrkzlJSmqAB60zVKo3nGnEhzz8osnWOP9xoRsc0zeM_On9iFhPpELjm-iLUy0tW9u7sGqQOpJLhKfh_721m_i4G1n9lDnQCs9qnjTbJ0ESV4lxLVAZ2ACoWtnCbtvvGEgtMiQMwCd8_RdVvNZIKGbXTinA20x7FXvK
3AttXH901JkMzwRiG-RUPQ
</artwork>
</section>

<section anchor="example-keys"><name>Example Keys</name>
<t>The next keys are just for illustrative purposes and should only be used to generate the examples in this documentation.</t>
<t>All the sample JWS's showed on this page have been signed using the same keys for the RP and OP JWT's. In a real implementation, each actor in the protocol has their own key pairs.</t>

<section anchor="public-key"><name>Public KEY</name>

<artwork>\-----BEGIN CERTIFICATE-----
MIIDtTCCAp2gAwIBAgIJAMKR/NsyfcazMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMTIxMTEyMjM0MzQxWhcNMTYxMjIxMjM0MzQxWjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEAvtH4wKLYlIXZlfYQFJtXZVC3fD8XMarzwvb/fHUyJ6NvNStN+H7GHp3/
QhZbSaRyqK5hu5xXtFLgnI0QG8oE1NlXbczjH45LeHWhPIdc2uHSpzXic78kOugM
Y1vng4J10PF6+T2FNaiv0iXeIQq9xbwwPYpflViQyJnzGCIZ7VGan6GbRKzyTKcB
58yx24pJq+CviLXEY52TIW1l5imcjGvLtlCp1za9qBZa4XGoVqHi1kRXkdDSHty6
lZWj3KxoRvTbiaBCH+75U7rifS6fR9lqjWE57bCGoz7+BBu9YmPKtI1KkyHFqWpx
aJc/AKf9xgg+UumeqVcirUmAsHJrMwIDAQABo4GnMIGkMB0GA1UdDgQWBBTs83nk
LtoXFlmBUts3EIxcVvkvcjB1BgNVHSMEbjBsgBTs83nkLtoXFlmBUts3EIxcVvkv
cqFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV
BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMKR/NsyfcazMAwGA1UdEwQF
MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABw7w/5k4d5dVDgd/OOOmXdaaCIKvt7d
3ntlv1SSvAoKT8d8lt97Dm5RrmefBI13I2yivZg5bfTge4+vAV6VdLFdWeFp1b/F
OZkYUv6A8o5HW0OWQYVX26zIqBcG2Qrm3reiSl5BLvpj1WSpCsYvs5kaO4vFpMak
/ICgdZD+rxwxf8Vb/6fntKywWSLgwKH3mJ+Z0kRlpq1g1oieiOm1/gpZ35s0Yuor
XZba9ptfLCYSggg/qc3d3d0tbHplKYkwFm7f5ORGHDSD5SJm+gI7RPE+4bO8q79R
PAfbG1UGuJ0b/oigagciHhJp851SQRYf3JuNSc17BnK2L5IEtzjqr+Q=
-----END CERTIFICATE-----
</artwork>
</section>

<section anchor="private-key"><name>Private KEY</name>

<artwork>\-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAvtH4wKLYlIXZlfYQFJtXZVC3fD8XMarzwvb/fHUyJ6NvNStN
+H7GHp3/QhZbSaRyqK5hu5xXtFLgnI0QG8oE1NlXbczjH45LeHWhPIdc2uHSpzXi
c78kOugMY1vng4J10PF6+T2FNaiv0iXeIQq9xbwwPYpflViQyJnzGCIZ7VGan6Gb
RKzyTKcB58yx24pJq+CviLXEY52TIW1l5imcjGvLtlCp1za9qBZa4XGoVqHi1kRX
kdDSHty6lZWj3KxoRvTbiaBCH+75U7rifS6fR9lqjWE57bCGoz7+BBu9YmPKtI1K
kyHFqWpxaJc/AKf9xgg+UumeqVcirUmAsHJrMwIDAQABAoIBAQCYKw05YSNhXVPk
eHLeW/pXuwR3OkCexPrakOmwMC0s2vIF7mChN0d6hvhVlUp68X7V8SnS2JxAGo8v
iHY+Et3DdwZ3cxnzwh+BEhzgDfoIOmkoGppZPyX/K6klWtbGUrTtSISOWXbvEXQU
G0qGAvDOzIGTsdMDX7slnU70Ac23JybPY5qBSiE+ky8U4dm2fUHMroWub4QP5vA/
nqyWqX2FB/MEAbcujaknDQrFCtbmtUYlBbJCKGd9V3cGEqp6H7oH+ah2ofMc91gJ
mCHk3YyWZB/bcVXH3CA+s1ywvCOVDBZ3Nw7Pt9zIcv6Rl9UKIy+Nx0QjXxR90Hla
Tr0GHIShAoGBAPsD7uXm+0ksnGyKRYgvlVad8Z8FUFT6bf4B+vboDbx40FO8O/5V
PraBPC5z8YRSBOQ/WfccPQzakkA28F2pXlRpXu5JcErVWnyyUiKpX5sw6iPenQR2
JO9hY/GFbKiwUhVHpvWMcXFqFLSQu2A86jPnFFEfG48ZT4IhTzINKJVZAoGBAMKc
B3YGfVfY9qiRFXzYRdSRLg5c8p/HzuWwXc9vfJ4kQTDkPXe/+nqD67rzeT54uVec
jKoIrsCu4BfEaoyvOT+1KmUfdEpBgYZuuEC4CZf7dgKbXOpPVvZDMyJ/e7HyqTpw
mvIYJLPm2fNAcAsnbrNX5mhLwwzEIltbplUUeRdrAoGBAKhZgPYsLkhrZRXevreR
wkTvdUfD1pbHxtFfHqROCjhnhsFCM7JmFcNtdaFqHYczQxiZ7IqxI7jlNsVek2Md
3qgaa5LBKlDmOuP67N9WXUrGSaJ5ATIm0qrB1Lf9VlzktIiVH8L7yHHaRby8fQ8U
i7b3ukaV6HPW895A3M6iyJ8xAoGAInp4S+3MaTL0SFsj/nFmtcle6oaHKc3BlyoP
BMBQyMfNkPbu+PdXTjtvGTknouzKkX4X4cwWAec5ppxS8EffEa1sLGxNMxa19vZI
yJaShI21k7Ko3I5f7tNrDNKfPKCsYMEwgnHKluDwfktNTnyW/Uk2dgXuMaXSHHN5
XZt59K8CgYArGVOWK7LUmf3dkTIs3tXBm4/IMtUZmWmcP9C8Xe/Dg/IdQhK5CIx4
VXl8rgZNeX/5/4nJ8Q3LrdLau1Iz620trNRGU6sGMs3x4WQbSq93RRbFzfG1oK74
IOo5yIBxImQOSk5jz31gF9RJb15SDBIxonuWv8qAERyUfvrmEwR0kg==
-----END RSA PRIVATE KEY-----
</artwork>
</section>
</section>
</section>

<section anchor="acknowledgements"><name>Acknowledgements</name>
<t>The authors would like to acknowledge James Begg, Roderick Boothby, Desislava Ilieva and Ildefonso Olmedo for their vital support.</t>
</section>

</middle>

<back>
<references><name>Normative References</name>
<reference anchor="RFC2616" target="https://tools.ietf.org/html/rfc2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author fullname="Roy T. Fielding" initials="R." surname="Fielding">
      <organization>UC Irvine</organization>
    </author>
    <date year="1999" month="June"></date>
  </front>
</reference>
<reference anchor="OAuth.Multiple.Responses" target="https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html">
  <front>
    <title>OAuth 2.0 Multiple Response Type Encoding Practices</title>
    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization>Google</organization>
    </author>
    <author fullname="Marius Scurtescu" initials="M." surname="Scurtescu">
      <organization>Google</organization>
    </author>
    <author fullname="Paul Tarjan" initials="P." surname="Tarjan">
      <organization>Facebook</organization>
    </author>
    <author fullname="Michael B. Jones" initials="M." surname="B. Jones">
      <organization>Microsoft</organization>
    </author>
    <date year="2014" month="February" day="25"></date>
  </front>
</reference>
<reference anchor="OIDC" target="http://openid.net/specs/openid-connect-core-1_0.html">
  <front>
    <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <author fullname="Mike Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization>Google</organization>
    </author>
    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization>Salesforce</organization>
    </author>
    <date year="2014" month="Nov" day="8"></date>
  </front>
</reference>
<reference anchor="URN" target="https://tools.ietf.org/html/rfc2141">
  <front>
    <title>Uniform Resource Names</title>
    <author fullname="Ryan Moats" initials="R." surname="Moats">
      <organization>AT&amp;T</organization>
    </author>
    <date year="1997" month="May"></date>
  </front>
</reference>
<reference anchor="OAuth.NativeApps" target="https://tools.ietf.org/html/rfc8252">
  <front>
    <title>OAuth 2.0 for Native Apps</title>
    <author fullname="William Denniss" initials="W." surname="Denniss">
      <organization>Google</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2017" month="October"></date>
  </front>
</reference>
<reference anchor="RFC2119" target="https://tools.ietf.org/html/rfc2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="Scott Bradner" initials="S." surname="Bradner">
      <organization>Harvard University</organization>
    </author>
    <date year="1997" month="March"></date>
  </front>
</reference>
<reference anchor="JWT" target="https://tools.ietf.org/html/rfc7519">
  <front>
    <title>JSON Web Token (JWT)</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="Mike Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2015" month="May"></date>
  </front>
</reference>
<reference anchor="JWS" target="https://tools.ietf.org/html/rfc7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="Mike Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2015" month="May"></date>
  </front>
</reference>
<reference anchor="OAuth.MTLS" target="https://tools.ietf.org/id/draft-ietf-oauth-mtls-07.html">
  <front>
    <title>OAuth 2.0 Mutual TLS Client Authentication and Certificate Bound Access Tokens</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="Torsten Lodderstedt" initials="T." surname="Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization>Ping Identity</organization>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Ping Identity</organization>
    </author>
    <date year="2018" month="January"></date>
  </front>
</reference>
<reference anchor="OAuth2.0" target="https://tools.ietf.org/html/rfc6749">
  <front>
    <title>The OAuth 2.0 Authorization Framework</title>
    <author fullname="Dick Hardt" initials="C." surname="Hardt">
      <organization>Microsoft</organization>
    </author>
    <date year="2012" month="October"></date>
  </front>
</reference>
<reference anchor="OAuth.PAR" target="https://tools.ietf.org/html/draft-lodderstedt-oauth-par-01">
  <front>
    <title>OAuth 2.0 Pushed Authorization Requests draft-lodderstedt-oauth-par-01</title>
    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>NRI</organization>
    </author>
    <author fullname="Torsten Lodderstedt" initials="T." surname="Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization>Ping Identity</organization>
    </author>
    <author fullname="Dave Tonge" initials="D." surname="Tonge">
      <organization>Moneyhub Financial Technology</organization>
    </author>
    <author fullname="Filip Skokan" initials="F." surname="Skokan">
      <organization>Auth0</organization>
    </author>
    <date year="2019" month="November" day="2"></date>
  </front>
</reference>
<reference anchor="RFC8417" target="https://www.rfc-editor.org/info/rfc8417">
  <front>
    <title>Security Event Token (SET)</title>
    <author fullname="Phil Hunt" initials="P." surname="Hunt, Ed.">
      <organization>Oracle</organization>
    </author>
    <author fullname="Michael B. Jones" initials="M." surname="Jones">
      <organization>Microsoft</organization>
    </author>
    <author fullname="William Denniss" initials="W." surname="Denniss">
      <organization>Google</organization>
    </author>
    <author fullname="Morteza Ansari" initials="M." surname="Ansari">
      <organization>Cisco</organization>
    </author>
    <date year="2018" month="July"></date>
  </front>
</reference>
</references>

<section anchor="iana-considerations"><name>IANA Considerations</name>

<section anchor="registry-contents"><name>Registry Contents</name>
<t>TBD...</t>

<ul>
<li><t><tt>txn</tt>: review if already exist.</t>
</li>
<li><t><tt>errors</tt>: response parameter in PAR.</t>
</li>
<li><t><tt>digital_trust_protocol_extension</tt>: for metadata.</t>
</li>
</ul>
</section>
</section>

<section anchor="notices"><name>Notices</name>
<t>MIT License</t>
<t>Copyright (c) 2020 Grupo Santander</t>
<t>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</t>
<t>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</t>
<t>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</t>
</section>

<section anchor="document-history"><name>Document History</name>
<t>[[ To be removed from the final specification ]]</t>
</section>

</back>

</rfc>
